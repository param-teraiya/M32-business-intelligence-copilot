# Docker Compose for M32 Business Intelligence Copilot
# Production environment with optimizations and security

version: '3.8'

services:
  # PostgreSQL Database with production settings
  database:
    image: postgres:15-alpine
    container_name: m32-database-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-m32_business_copilot}
      POSTGRES_USER: ${POSTGRES_USER:-m32user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - m32-network-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-m32user} -d ${POSTGRES_DB:-m32_business_copilot}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Cache with production settings
  redis:
    image: redis:7-alpine
    container_name: m32-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - m32-network-prod
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backend API with production optimizations
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: m32-backend-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-m32user}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB:-m32_business_copilot}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GROQ_MODEL_NAME=${GROQ_MODEL_NAME:-openai/gpt-oss-120b}
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}
      - ENVIRONMENT=production
      - MAX_WORKERS=${MAX_WORKERS:-4}
    volumes:
      - backend_logs_prod:/app/logs
    networks:
      - m32-network-prod
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 60s
      timeout: 30s
      retries: 3
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      replicas: 2

  # Frontend with Nginx and production optimizations
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: m32-frontend-prod
    networks:
      - m32-network-prod
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 60s
      timeout: 30s
      retries: 3
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Load Balancer and Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: m32-nginx-prod
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - m32-network-prod
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 60s
      timeout: 30s
      retries: 3
    restart: always

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: m32-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - m32-network-prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: always

  # Grafana for monitoring dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: m32-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - m32-network-prod
    depends_on:
      - prometheus
    restart: always

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  backend_logs_prod:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  m32-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
